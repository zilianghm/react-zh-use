// 1. 当项目安装了 eslint 包后，通过 eslint -init 命令会创建此文件
// 2. 下面面配置完成后，只是可以在命令行中通过 eslint xxx 进行检测文件
// 3. 如果需要在 vscode 编辑器实时检测 eslint 规则，则需要安装 eslint 插件扩展
// 4. eslint 一般是配合 prettier 格式化来进行团队使用，提前下载 eslint-config-prettier 与 eslint-plugins-prettier 包
{
    // 当前目录下，只使用此配置文件，不再往上查找其他配置与不合并配置
    // "root": true,
    // 所在环境的一组全局变量预设不提醒
    "env": {
        "browser": true,
        "commonjs": true,
        "node": true,
        "es2021": true
    },
    // 使用未定义的变量预设不提醒
    "globals": {},
    // js 解析器配置
    "parserOptions": {
        // ecma 版本
        "ecmaVersion": 10,
        // 可以解析 es6 模块化
        "sourceType": "module"
    },
    // 禁用一组文件中使用规则，详细使用看官方文档
    "overrides": [],
    // 共享的规则，它将提供给每一个将被执行的规则
    "settings": {},
    // 必须先【引入注册】第三方插件，输入一个或者多个规则配置对象，注意：所有插件都需要提前安装 npm 包
    "plugins": [
        // eslint-plugin- 前缀可以省略，当前功能：引入 prettier 插件
        // "eslint-plugin-prettier"
    ],
    // extends 扩展指定的规则【配置对象】，官方称为【可共享配置】，也就是将别人的代码规范拿来用。支持规则的覆盖和聚合，相同配置对象，后书写的覆盖前面的。
    // 注意：第三方【可共享配置】都需要提前安装 npm 包，eslint 官方内置的 eslint:all与 eslint:recommended 不需要
    "extends": [
        // 使用 eslint 所有的核心规则，不推荐配置这项
        // "eslint:all",
        // 使用官方推荐的规则配置对象
        // "eslint:recommended"
        // eslint-plugin- 前缀可以省略，功能：仅【关闭】与 prettier 规则冲突的 eslint 规则，不会新增规则
        // "eslint-config-prettier"
        // 关于 prettier 插件还可以如下写法，它是其他 prettier 配置的总和，官方推荐这个写法。
        // 启用 prettier 插件后，eslint 的格式化与 prettier 会并存，也就是说：如果后面配置了单独的风格，先按 eslint 格式化一遍，再会按 prettier 自定义的规则格式化一遍。
        // 所以，最好单独使用 prettier，实在不喜欢就完全禁用它。
        // "plugin:prettier/recommended"
        // 使用 vue
        // "plugin:vue/essential",
        "prettier"
    ],
    // 具体规则配置，k 是规则名称，v 是提醒级别： off/1、warn/2、error/2。对于插件，k 值通过【 / 】分割，前面表示插件包名称，后面表示具体配置名称，v 值时提醒级别 
    "rules": {
        // 使用 prettier 插件，当前功能：标记出不符合 prettier 插件中的规则（代码风格）
        // "prettier/prettier": "error",
        // 规则的选项，使用数组来表示，第一个成员是提示级别，第二个成员是选项。需要注意：下面规则会和 prettier 冲突
        // "array-bracket-spacing": ["error", "always"]
        // 不提醒未使用的变量
        // "no-unused-vars": "off"
        // 强制 [] 开头结尾有空格
        // "array-bracket-spacing": [2, "always"],
        // 强制 () 开头结尾有空格
        // "space-in-parens": [2, "always"],
        // 强制 {} 开头结尾有空格
        // "block-spacing": [2, "always"],
        // 强制在计算的属性的方括号中使用一致的空格
        // "computed-property-spacing": [2, "always"],
        // 要求操作符周围有空格
        // "space-infix-ops": [2, "always"]
    }
}